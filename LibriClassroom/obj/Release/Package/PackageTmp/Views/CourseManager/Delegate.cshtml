@model IEnumerable<LibriClassroom.ViewModels.RosterViewModel>
@*@using Libri.Web.Ui.GoogleAuth.Infrastructure*@

@{
    ViewBag.Title = "Delegate Users";
    //Layout = "~/Views/Shared/_Layout.cshtml";
}

@section Scripts {
    <script type="text/javascript">
        $(document).ready(function () {
            //===== Autocomplete =====//
            // Using typehead.js-library
            var users = (function () {
                var users = null;
                $.ajax({
                    'async': false,
                    'global': false,
                    'url': "/CourseManager/Autocomplete",
                    'dataType': "json",
                    'success': function (data) {
                        users = data;
                    }
                });
                return users;
            })();
            $('#autocomplete-username').typeahead({
                name: 'autocomplete-username',
                local: users
            });
            $("#btnEnroll").click(function (e) {
                //validimi
                if ($("#autocomplete-username").val() == null || $("#autocomplete-username").val() == '') {
                    alert('Please write a valid user name');
                    return false;
                }
                $('#enrollments').html('<div class="col-md-12"><img src="../../../melon/assets/img/ajax-loading-input.gif" /> Loading...</div>');
                //if (new Date($("#txtDateClose").val()) < new Date($("#txtDateOpen").val())) { alert('The open date of the quiz should be before its closing date.'); return false; }
                //kryeji aksionet pasi lejohet tash
                Enroll();
            });

            function Enroll() {
                var username = $("#autocomplete-username").val();
                var courseid = '@ViewBag.courseid';

                var postValues = "{'username':'" + username + "', 'courseid':'" + courseid + "'}"
                //CreateQuiz(String Activityid, String Username, DateTime DateOpen, DateTime DateClose, int Duration, String Title, String Description, Boolean RandomizeQuestions, Boolean ShowResults, Boolean AllowMultipleRetake, int PassingThreshold, int NegativePoints, int UnansweredPoints, int PointsInGrade)
                App.blockUI("div#content");
                $.ajax({
                    url: "/CourseManager/Delegate",
                    type: "POST",
                    dataType: "json",
                    data: postValues,
                    contentType: "application/json; charset=utf-8",
                    success: function (msg) {
                        if(msg==false)
                        {
                            //notify error client
                            window.setTimeout(function () {
                                App.unblockUI("div#content");
                                noty({
                                    text: '<strong>The user cannot be added or he may be already enrolled for this course.</strong>',
                                    type: 'danger',
                                    timeout: 4000
                                });
                            }, 4000);
                            GetCourseRoster(courseid);
                        } 
                        else
                        {
                            //notify success client
                            window.setTimeout(function () {
                                App.unblockUI("div#content");
                                noty({
                                    text: '<strong>The user was successfully enrolled.</strong>',
                                    type: 'success',
                                    timeout: 4000
                                });
                            }, 4000);
                        }
                        GetCourseRoster(courseid);
                    },
                    error: function (e) {
                        //notify error client
                        window.setTimeout(function () {
                            App.unblockUI("div#content");
                            noty({
                                text: '<strong>The user cannot be added or he may be already enrolled for this course.</strong>',
                                type: 'danger',
                                timeout: 4000
                            });
                        }, 4000);
                        GetCourseRoster(courseid);
                    }
                });
            }
        });

        function DeleteRoster(username) {
            var courseid = '@ViewBag.courseid';

            var postValues = "{'username':'" + username + "', 'courseid':'" + courseid + "'}";
            //CreateQuiz(String Activityid, String Username, DateTime DateOpen, DateTime DateClose, int Duration, String Title, String Description, Boolean RandomizeQuestions, Boolean ShowResults, Boolean AllowMultipleRetake, int PassingThreshold, int NegativePoints, int UnansweredPoints, int PointsInGrade)
            App.blockUI("div#content");
            $.ajax({
                url: "/CourseManager/DeleteRoster",
                type: "POST",
                dataType: "json",
                data: postValues,
                contentType: "application/json; charset=utf-8",
                success: function (msg) {
                    if(msg == true)
                    {
                        var trid = username.split('.').join("");
                        $('#'+ trid).remove();
                        window.setTimeout(function () {
                            App.unblockUI("div#content");
                            noty({
                                text: '<strong>The user was removed successfully.</strong>',
                                type: 'success',
                                timeout: 4000
                            });
                        }, 4000);
                    }
                },
                error: function (e) {
                    window.setTimeout(function () {
                        App.unblockUI("div#content");
                        noty({
                            text: '<strong>The user cannot removed currently.</strong>',
                            type: 'danger',
                            timeout: 4000
                        });
                    }, 4000);
                }
            });
        }
        function GetCourseRoster(courseid)
        {
            $.ajax({
                url: "/CourseManager/GetCourseRoster",
                type: "POST",
                dataType: "json",
                data: "{'courseid':'" + courseid + "'}",
                contentType: "application/json; charset=utf-8",
                success: function (msg) {
                    var list = msg;
                    var disp = "<div class='col-md-12'><table class='table table-striped table-hover'><tr><th> Name </th><th> Username </th><th>Role </th><th></th></tr>";
                    for (i = 0; i < list.length; i++) {
                        //var userid = list[i].UserId;
                        var username = list[i].Username;
                        var trid = username.split('.').join("");
                        var name = list[i].Name;
                        var isTeacher = list[i].IsTeacher;
                        disp += "<tr id='"+ trid +"'><td>";
                        disp += name;
                        disp += "</td><td>";
                        disp += username;
                        disp += "</td><td>";
                        if(isTeacher == true) disp += "Instructor"; else disp += "Student";
                        disp += "</td>";
                        disp += "<td>";
                        disp += "<input type='button' class='btn btn-xs btn-danger' value='Remove' onclick=\"DeleteRoster('" + username + "')\" />";
                        disp += "</td>";
                        disp += "</tr>";
                    }
                    disp += "</table></div>";
                    $("#enrollments").html(disp);
                },
                error: function (e) {
                    window.setTimeout(function () {
                        App.unblockUI("div#content");
                        noty({
                            text: '<strong>Course roster can not be retreived.</strong>',
                            type: 'danger',
                            timeout: 4000
                        });
                    }, 4000);
                }
            });
        }
    </script>
}
<h3>Delegate</h3>

<div class="row">
    <div class="col-md-4">
        <input type="hidden" id="courseid" name="courseid" value="@ViewBag.courseid" />
        <input type="text" id="autocomplete-username" name="autocomplete" class="form-control input-width-xlarge" placeholder="Start typing the username"/>
    </div>
    <div class="col-md-4">
        <input id="btnEnroll" type="button" value="Enroll" class="btn btn-primary" />
    </div>
    <div class="col-md-4">
    </div>
    <div class="col-md-4">
    </div>
</div>
<div id="enrollments" class="row" style="margin-top: 10px;">
    <div class="col-md-12">
    <table class="table table-striped table-hover ">
        <tr>
            <th>
                Name
            </th>
            <th>
                Email
            </th>

            <th>Role
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr id="@item.Username">
                <td>
                    @Html.DisplayFor(modelItem => item.Name)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Email)
                </td>

                <td>
                    @if(item.IsTeacher == true)
                    {
                        <text>Instructor</text>
                    }
                    else
                    {
                        <text>Student</text> 
                    } 
                </td>
                <td>
                    <input type="button" class="btn btn-xs btn-danger" value="Remove" onclick="DeleteRoster('@item.Username');" />
                </td>
            </tr>
        }

    </table>
</div>
    </div>
